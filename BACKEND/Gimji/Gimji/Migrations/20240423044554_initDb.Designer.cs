// <auto-generated />
using System;
using Gimji.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gimji.Migrations
{
    [DbContext(typeof(MyPostgresDbContext))]
    [Migration("20240423044554_initDb")]
    partial class initDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gimji.Models.CategoryCode", b =>
                {
                    b.Property<string>("CodeValue")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CodeValue");

                    b.ToTable("category");
                });

            modelBuilder.Entity("Gimji.Models.FoodEstablishmentReservation", b =>
                {
                    b.Property<int>("reservationId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("integer")
                        .HasColumnName("reservationId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("reservationId"));

                    b.Property<int?>("RestaurantTableTableNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("bookingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("modifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("partySize")
                        .HasColumnType("integer");

                    b.Property<int>("providerid")
                        .HasColumnType("integer");

                    b.Property<string>("reservationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("underName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("reservationId");

                    b.HasIndex("RestaurantTableTableNumber");

                    b.HasIndex("providerid");

                    b.ToTable("reservation");
                });

            modelBuilder.Entity("Gimji.Models.Product", b =>
                {
                    b.Property<string>("productID")
                        .HasColumnType("text")
                        .HasColumnName("productID");

                    b.Property<string>("categoryCodeValue")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("image1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("image2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("image3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nsn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.HasKey("productID");

                    b.HasIndex("categoryCodeValue");

                    b.ToTable("product");
                });

            modelBuilder.Entity("Gimji.Models.RestaurantTable", b =>
                {
                    b.Property<int>("TableNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tableId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TableNumber"));

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("boolean");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tableName");

                    b.HasKey("TableNumber");

                    b.ToTable("RestaurantTable");
                });

            modelBuilder.Entity("Gimji.Models.Role", b =>
                {
                    b.Property<int>("numberedPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("numberedPosition"));

                    b.Property<DateTime>("endDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("salaryCurrency")
                        .HasColumnType("real");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("numberedPosition");

                    b.ToTable("role");
                });

            modelBuilder.Entity("Gimji.Models.customer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("accountId")
                        .HasColumnType("text");

                    b.Property<string>("accountPassword")
                        .HasColumnType("text");

                    b.Property<DateTime?>("birthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("familyName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("gender")
                        .HasColumnType("text");

                    b.Property<string>("givenName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool?>("hasCertification")
                        .HasColumnType("boolean");

                    b.Property<string>("homeLocation")
                        .HasColumnType("text");

                    b.Property<string>("jobTitle")
                        .HasColumnType("text");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("Gimji.Models.employee", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("accountId")
                        .HasColumnType("text");

                    b.Property<string>("accountPassword")
                        .HasColumnType("text");

                    b.Property<DateTime?>("birthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("familyName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("gender")
                        .HasColumnType("text");

                    b.Property<string>("givenName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool?>("hasCertification")
                        .HasColumnType("boolean");

                    b.Property<string>("homeLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("jobTitle")
                        .HasColumnType("text");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("employee");
                });

            modelBuilder.Entity("Roleemployee", b =>
                {
                    b.Property<int>("Employeesid")
                        .HasColumnType("integer");

                    b.Property<int>("RolesnumberedPosition")
                        .HasColumnType("integer");

                    b.HasKey("Employeesid", "RolesnumberedPosition");

                    b.HasIndex("RolesnumberedPosition");

                    b.ToTable("Roleemployee");
                });

            modelBuilder.Entity("Gimji.Models.FoodEstablishmentReservation", b =>
                {
                    b.HasOne("Gimji.Models.RestaurantTable", null)
                        .WithMany("Reservations")
                        .HasForeignKey("RestaurantTableTableNumber");

                    b.HasOne("Gimji.Models.employee", "provider")
                        .WithMany()
                        .HasForeignKey("providerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("provider");
                });

            modelBuilder.Entity("Gimji.Models.Product", b =>
                {
                    b.HasOne("Gimji.Models.CategoryCode", "category")
                        .WithMany()
                        .HasForeignKey("categoryCodeValue");

                    b.Navigation("category");
                });

            modelBuilder.Entity("Roleemployee", b =>
                {
                    b.HasOne("Gimji.Models.employee", null)
                        .WithMany()
                        .HasForeignKey("Employeesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gimji.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesnumberedPosition")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gimji.Models.RestaurantTable", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
